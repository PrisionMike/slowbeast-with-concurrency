#!/usr/bin/python3

from llvm.parser import Parser
import argparse
import sys

from slowbeast.symexe.symbolicexecution import SymbolicExecutor
from slowbeast.util.debugging import set_debugging, print_stdout, print_stderr



def createArgParser():
    parser = argparse.ArgumentParser()
    parser.add_argument('prog', nargs=1, help='program to be analyzed')
    parser.add_argument('-dbg', action='store_true', help='write debugging messages')
    parser.add_argument('-entry', default='main', help='entry function')
    parser.add_argument('-se-concretize-nondet', action='store_true', default=False,
                        help='Use random value for nondet values, thus follow one random path during symbolic execution (for debugging).')

    return parser

def print_stats(engine):
    print_stdout(
        "Executed instructions: {0}".format(
            engine.stats.instructions),
        color='CYAN')
    print_stdout(
        "Executed paths: {0}".format(
            engine.stats.paths),
        color='CYAN')
    print_stdout(
        "Paths that reached exit: {0}".format(
            engine.stats.exited_paths),
        color='CYAN')
    print_stdout(
        "Executed branch instructions: {0}".format(
            engine._executor.stats.branchings),
        color='CYAN')
    print_stdout(
        "Number of forks on branches: {0} (forked on {1}% of branches)".format(
            engine._executor.stats.branch_forks,
            0 if engine._executor.stats.branchings == 0 else
            100 *
            float(
                engine._executor.stats.branch_forks) /
            engine._executor.stats.branchings),
        color='CYAN')
    # this includes e.g. forks on assertions/memory resolution/etc.
    print_stdout(
        "Number of all forks: {0} (from {1} calls ({2}%) to fork())".format(
            engine._executor.stats.forks,
            engine._executor.stats.fork_calls,
            0 if engine._executor.stats.fork_calls == 0 else
            100 *
            float(
                engine._executor.stats.forks) /
            engine._executor.stats.fork_calls),
        color='CYAN')
    print_stdout(
        "Found errors: {0}".format(
            engine.stats.errors),
        color='CYAN')



def main():
    cmd = createArgParser()
    args = cmd.parse_args()

    parser = Parser()
    try:
        P = parser.parse(args.prog[0])
    except FileNotFoundError as e:
        print_stderr(str(e), color="RED")
        sys.exit(1)
    if not P:
        sys.exit(1)

    if args.dbg:
        set_debugging()
        P.dump()

    entry = P.getFunction(args.entry)
    if not entry:
        print("Entry function not found: {0}".format(args.entry))
        sys.exit(1)

    P.setEntry(entry)
    SE = SymbolicExecutor(P, args.se_concretize_nondet)
    try:
        SE.run()
        print_stats(SE)
    except KeyboardInterrupt:
        print_stdout("Interrupted...")
        print_stats(SE)

    sys.exit(0)

if __name__ == "__main__":
    main()
